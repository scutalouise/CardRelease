<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- 导入外部资源文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 配置扫描路径:将springmvc要扫描的包给排除出去，否者，他们都会扫描的包会初始化2次 -->
	<context:component-scan base-package="com.sanploy.card" >   
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 配置自动扫描模式，配置了context:component-scan就不用再配置context:annotaton-config了 
	<context:annotation-config></context:annotation-config>
	-->
	
	<!-- 配置druid数据库连接池与监控 -->	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"  destroy-method="close">
		<!-- 数据源的基本属性配置 -->
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName -->
		<property name="driverClassName" value="${jdbc.driverClass}"></property>
		<property name="url" value="${jdbc.jdbcUrl}"></property>
		<!-- 配置初始化大小,最小,最大-->
		<property name="initialSize" value="1"></property>
		<property name="minIdle" value="1"></property>
		<property name="maxActive" value="20"></property>
		<!-- 配置获取连接等待超时的时间,单位：毫秒 -->
		<property name="maxWait" value="60000"></property>
		<!-- 配置多久才进行一次检测、检测要关闭的空闲连接，单位：毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property>
		<!-- 配置一个连接在连接池中的最小生存时间、单位：毫秒 -->
		<!-- 有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="minEvictableIdleTimeMillis" value="300000"></property>
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="SELECT 'x'"></property>
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true"></property>
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="true"></property>
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="true"></property>
		<!-- 打开PSCache,并且指定每个连接上PSCache的连接大小 -->
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<property name="poolPreparedStatements" value="true"></property>
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>
		<!-- 配置监控统计、拦截的的filters:属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有: 监控统计用的filter:stat;日志用的filter:log4j;防御SQL注入的filter:wall  -->
		<property name="filters" value="wall,stat"></property>
	</bean>
	<!-- 配置SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- <prop key="hibernate.show_sql">true</prop>  此属性，交给日志处理，打印； -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
			</props>
		</property>
		<property name="packagesToScan" value="com.sanploy.card.pojo"></property>
	</bean>

	<!-- 事物管理配置 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>	
	
	<!-- 注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>
